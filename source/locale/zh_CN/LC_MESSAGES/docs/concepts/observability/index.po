# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, BandCamp
# This file is distributed under the same license as the istio-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: istio-docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-03-22 10:08+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../source/docs/concepts/observability/index.rst:2
msgid "Observability"
msgstr ""

#: ../../source/docs/concepts/observability/index.rst:4
msgid ""
"Istio generates detailed telemetry for all service communications within "
"a mesh. This telemetry provides *observability* of service behavior, "
"empowering operators to troubleshoot, maintain, and optimize their "
"applications – without imposing any additional burdens on service "
"developers. Through Istio, operators gain a thorough understanding of how"
" monitored services are interacting, both with other services and with "
"the Istio components themselves."
msgstr ""

#: ../../source/docs/concepts/observability/index.rst:12
msgid ""
"Istio generates the following types of telemetry in order to provide "
"overall service mesh observability:"
msgstr ""

#: ../../source/docs/concepts/observability/index.rst:15
msgid ""
"`Metrics <#metrics>`_. Istio generates a set of service metrics based on "
"the four “golden signals” of monitoring (latency, traffic, errors, and "
"saturation). Istio also provides detailed metrics for the `mesh control "
"plane </docs/ops/deployment/architecture/>`_. A default set of mesh "
"monitoring dashboards built on top of these metrics is also provided."
msgstr ""

#: ../../source/docs/concepts/observability/index.rst:21
msgid ""
"`Distributed Traces <#distributed-traces>`_. Istio generates distributed "
"trace spans for each service, providing operators with a detailed "
"understanding of call flows and service dependencies within a mesh."
msgstr ""

#: ../../source/docs/concepts/observability/index.rst:25
msgid ""
"`Access Logs <#access-logs>`_. As traffic flows into a service within a "
"mesh, Istio can generate a full record of each request, including source "
"and destination metadata. This information enables operators to audit "
"service behavior down to the individual `workload instance "
"</docs/reference/glossary/#workload-instance>`_ level."
msgstr ""

#: ../../source/docs/concepts/observability/index.rst:32
msgid "Metrics"
msgstr ""

#: ../../source/docs/concepts/observability/index.rst:34
msgid ""
"Metrics provide a way of monitoring and understanding behavior in "
"aggregate."
msgstr ""

#: ../../source/docs/concepts/observability/index.rst:37
msgid ""
"To monitor service behavior, Istio generates metrics for all service "
"traffic in, out, and within an Istio service mesh. These metrics provide "
"information on behaviors such as the overall volume of traffic, the error"
" rates within the traffic, and the response times for requests."
msgstr ""

#: ../../source/docs/concepts/observability/index.rst:42
msgid ""
"In addition to monitoring the behavior of services within a mesh, it is "
"also important to monitor the behavior of the mesh itself. Istio "
"components export metrics on their own internal behaviors to provide "
"insight on the health and function of the mesh control plane."
msgstr ""

#: ../../source/docs/concepts/observability/index.rst:48
msgid "Proxy-level metrics"
msgstr ""

#: ../../source/docs/concepts/observability/index.rst:50
msgid ""
"Istio metrics collection begins with the sidecar proxies (Envoy). Each "
"proxy generates a rich set of metrics about all traffic passing through "
"the proxy (both inbound and outbound). The proxies also provide detailed "
"statistics about the administrative functions of the proxy itself, "
"including configuration and health information."
msgstr ""

#: ../../source/docs/concepts/observability/index.rst:56
msgid ""
"Envoy-generated metrics provide monitoring of the mesh at the granularity"
" of Envoy resources (such as listeners and clusters). As a result, "
"understanding the connection between mesh services and Envoy resources is"
" required for monitoring the Envoy metrics."
msgstr ""

#: ../../source/docs/concepts/observability/index.rst:61
msgid ""
"Istio enables operators to select which of the Envoy metrics are "
"generated and collected at each workload instance. By default, Istio "
"enables only a small subset of the Envoy-generated statistics to avoid "
"overwhelming metrics backends and to reduce the CPU overhead associated "
"with metrics collection. However, operators can easily expand the set of "
"collected proxy metrics when required. This enables targeted debugging of"
" networking behavior, while reducing the overall cost of monitoring "
"across the mesh."
msgstr ""

#: ../../source/docs/concepts/observability/index.rst:70
msgid ""
"The `Envoy documentation site "
"<https://www.envoyproxy.io/docs/envoy/latest/>`_ includes a detailed "
"overview of `Envoy statistics collection "
"<https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/observability/statistics.html?highlight=statistics>`_."
" The operations guide on `Envoy Statistics </docs/ops/diagnostic-tools"
"/proxy-cmd/>`_ provides more information on controlling the generation of"
" proxy-level metrics."
msgstr ""

#: ../../source/docs/concepts/observability/index.rst:78
msgid "Example proxy-level Metrics:"
msgstr ""

#: ../../source/docs/concepts/observability/index.rst:80
msgid ""
"{{< text json >}} "
"envoy_cluster_internal_upstream_rq{response_code_class=“2xx”,cluster_name"
"=“xds-grpc”} 7163"
msgstr ""

#: ../../source/docs/concepts/observability/index.rst:84
msgid "envoy_cluster_upstream_rq_completed{cluster_name=“xds-grpc”} 7164"
msgstr ""

#: ../../source/docs/concepts/observability/index.rst:86
msgid "envoy_cluster_ssl_connection_error{cluster_name=“xds-grpc”} 0"
msgstr ""

#: ../../source/docs/concepts/observability/index.rst:88
msgid "envoy_cluster_lb_subsets_removed{cluster_name=“xds-grpc”} 0"
msgstr ""

#: ../../source/docs/concepts/observability/index.rst:90
msgid ""
"envoy_cluster_internal_upstream_rq{response_code=“503”,cluster_name=“xds-"
"grpc”} 1"
msgstr ""

#: ../../source/docs/concepts/observability/index.rst:94
msgid "Service-level metrics"
msgstr ""

#: ../../source/docs/concepts/observability/index.rst:96
msgid ""
"In addition to the proxy-level metrics, Istio provides a set of service-"
"oriented metrics for monitoring service communications. These metrics "
"cover the four basic service monitoring needs: latency, traffic, errors, "
"and saturation. Istio ships with a default set of `dashboards "
"</docs/tasks/observability/metrics/using-istio-dashboard/>`_ for "
"monitoring service behaviors based on these metrics."
msgstr ""

#: ../../source/docs/concepts/observability/index.rst:103
msgid ""
"The `standard Istio metrics </docs/reference/config/policy-and-"
"telemetry/metrics/>`_ are exported to `Prometheus </docs/reference/config"
"/policy-and-telemetry/adapters/prometheus/>`_ by default."
msgstr ""

#: ../../source/docs/concepts/observability/index.rst:109
msgid ""
"Use of the service-level metrics is entirely optional. Operators may "
"choose to turn off generation and collection of these metrics to meet "
"their individual needs."
msgstr ""

#: ../../source/docs/concepts/observability/index.rst:113
msgid "Example service-level metric:"
msgstr ""

#: ../../source/docs/concepts/observability/index.rst:115
msgid ""
"{{< text json >}} istio_requests_total{ "
"connection_security_policy=“mutual_tls”, destination_app=“details”, "
"destination_canonical_service=“details”, "
"destination_canonical_revision=“v1”, "
"destination_principal=“cluster.local/ns/default/sa/default”, "
"destination_service=“details.default.svc.cluster.local”, "
"destination_service_name=“details”, "
"destination_service_namespace=“default”, destination_version=“v1”, "
"destination_workload=“details-v1”, "
"destination_workload_namespace=“default”, reporter=“destination”, "
"request_protocol=“http”, response_code=“200”, response_flags=“-”, "
"source_app=“productpage”, source_canonical_service=“productpage”, "
"source_canonical_revision=“v1”, "
"source_principal=“cluster.local/ns/default/sa/default”, "
"source_version=“v1”, source_workload=“productpage-v1”, "
"source_workload_namespace=“default” } 214"
msgstr ""

#: ../../source/docs/concepts/observability/index.rst:133
msgid "Control plane metrics"
msgstr ""

#: ../../source/docs/concepts/observability/index.rst:135
msgid ""
"Each Istio component (Pilot, Galley, Mixer) also provides a collection of"
" self-monitoring metrics. These metrics allow monitoring of the behavior "
"of Istio itself (as distinct from that of the services within the mesh)."
msgstr ""

#: ../../source/docs/concepts/observability/index.rst:140
msgid ""
"For more information on which metrics are maintained, please refer to the"
" reference documentation for each of the components:"
msgstr ""

#: ../../source/docs/concepts/observability/index.rst:143
msgid "`Pilot </docs/reference/commands/pilot-discovery/#metrics>`_"
msgstr ""

#: ../../source/docs/concepts/observability/index.rst:144
msgid "`Galley </docs/reference/commands/galley/#metrics>`_"
msgstr ""

#: ../../source/docs/concepts/observability/index.rst:145
msgid "`Mixer </docs/reference/commands/mixs/#metrics>`_"
msgstr ""

#: ../../source/docs/concepts/observability/index.rst:146
msgid "`Citadel </docs/reference/commands/istio_ca/#metrics>`_"
msgstr ""

#: ../../source/docs/concepts/observability/index.rst:149
msgid "Distributed traces"
msgstr ""

#: ../../source/docs/concepts/observability/index.rst:151
msgid ""
"Distributed tracing provides a way to monitor and understand behavior by "
"monitoring individual requests as they flow through a mesh. Traces "
"empower mesh operators to understand service dependencies and the sources"
" of latency within their service mesh."
msgstr ""

#: ../../source/docs/concepts/observability/index.rst:156
msgid ""
"Istio supports distributed tracing through the Envoy proxies. The proxies"
" automatically generate trace spans on behalf of the applications they "
"proxy, requiring only that the applications forward the appropriate "
"request context."
msgstr ""

#: ../../source/docs/concepts/observability/index.rst:161
msgid ""
"Istio supports a number of tracing backends, including `Zipkin "
"</docs/tasks/observability/distributed-tracing/zipkin/>`_, `Jaeger "
"</docs/tasks/observability/distributed-tracing/jaeger/>`_, `LightStep "
"</docs/tasks/observability/distributed-tracing/lightstep/>`_, and "
"`Datadog <https://www.datadoghq.com/blog/monitor-istio-with-datadog/>`_. "
"Operators control the sampling rate for trace generation (that is, the "
"rate at which tracing data is generated per request). This allows "
"operators to control the amount and rate of tracing data being produced "
"for their mesh."
msgstr ""

#: ../../source/docs/concepts/observability/index.rst:172
msgid ""
"More information about Distributed Tracing with Istio is found in our "
"`FAQ on Distributed Tracing </faq/distributed-tracing/>`_."
msgstr ""

#: ../../source/docs/concepts/observability/index.rst:175
msgid "Example Istio-generated distributed trace for a single request:"
msgstr ""

#: ../../source/docs/concepts/observability/index.rst:183
msgid "Access logs"
msgstr ""

#: ../../source/docs/concepts/observability/index.rst:185
msgid ""
"Access logs provide a way to monitor and understand behavior from the "
"perspective of an individual workload instance."
msgstr ""

#: ../../source/docs/concepts/observability/index.rst:188
msgid ""
"Istio can generate access logs for service traffic in a configurable set "
"of formats, providing operators with full control of the how, what, when "
"and where of logging. Istio exposes a full set of source and destination "
"metadata to the access logging mechanisms, allowing detailed audit of "
"network transactions."
msgstr ""

#: ../../source/docs/concepts/observability/index.rst:194
msgid "Example Istio access log (formatted in JSON):"
msgstr ""

#: ../../source/docs/concepts/observability/index.rst:196
msgid ""
"{{< text json >}} "
"{“level”:“info”,“time”:“2019-06-11T20:57:35.424310Z”,“instance”:“accesslog.instance"
".istio-"
"control”,“connection_security_policy”:“mutual_tls”,“destinationApp”:“productpage”,“destinationIp”:“10.44.2.15”,“destinationName”:“productpage-v1-6db7564db8-pvsnd”,“destinationNamespace”:“default”,“destinationOwner”:“kubernetes://apis/apps/v1/namespaces/default/deployments/productpage-v1”,“destinationPrincipal”:“cluster.local/ns/default/sa/default”,“destinationServiceHost”:“productpage.default.svc.cluster.local”,“destinationWorkload”:“productpage-v1”,“httpAuthority”:“35.202.6.119”,“latency”:“35.076236ms”,“method”:“GET”,“protocol”:“http”,“receivedBytes”:917,“referer”:\"“,”reporter“:”destination“,”requestId“:”e3f7cffb-5642"
"-434d-"
"ae75-233a05b06158“,”requestSize“:0,”requestedServerName“:”outbound_.9080_._.productpage.default.svc.cluster.local“,”responseCode“:200,”responseFlags“:”-“,”responseSize“:4183,”responseTimestamp“:”2019-06-11T20:57:35.459150Z“,”sentBytes“:4328,”sourceApp"
"“:”istio-ingressgateway“,”sourceIp“:”10.44.0.8“,”sourceName"
"“:”ingressgateway-7748774cbf-bvf4j“,”sourceNamespace“:”istio-"
"control“,”sourceOwner“:”kubernetes://apis/apps/v1/namespaces/istio-"
"control/deployments/ingressgateway“,”sourcePrincipal“:”cluster.local/ns"
"/istio-"
"control/sa/default“,”sourceWorkload“:”ingressgateway“,”url“:”/productpage“,”userAgent“:”curl/7.54.0“,”xForwardedFor“:”10.128.0.35\"}"
msgstr ""

