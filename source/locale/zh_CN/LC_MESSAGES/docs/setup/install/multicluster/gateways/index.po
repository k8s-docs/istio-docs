# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, BandCamp
# This file is distributed under the same license as the istio-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: istio-docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-03-22 10:08+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:2
msgid "gateways"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:4
msgid ""
"Follow this guide to install an Istio `multicluster deployment "
"</docs/ops/deployment/deployment-models/#multiple-clusters>`_ with "
"replicated `control plane </docs/ops/deployment/deployment-models"
"/#control-plane-models>`_ instances in every cluster and using gateways "
"to connect services across clusters."
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:11
msgid ""
"Instead of using a shared Istio control plane to manage the mesh, in this"
" configuration each cluster has its own Istio control plane installation,"
" each managing its own endpoints. All of the clusters are under a shared "
"administrative control for the purposes of policy enforcement and "
"security."
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:17
msgid ""
"A single Istio service mesh across the clusters is achieved by "
"replicating shared services and namespaces and using a common root CA in "
"all of the clusters. Cross-cluster communication occurs over Istio "
"gateways of the respective clusters."
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:28
msgid "Prerequisites"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:30
msgid ""
"Two or more Kubernetes clusters with versions: {{< "
"supported_kubernetes_versions >}}."
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:33
msgid ""
"Authority to `deploy the Istio control plane "
"</docs/setup/install/istioctl/>`_ on **each** Kubernetes cluster."
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:37
msgid ""
"The IP address of the ``istio-ingressgateway`` service in each cluster "
"must be accessible from every other cluster, ideally using L4 network "
"load balancers (NLB). Not all cloud providers support NLBs and some "
"require special annotations to use them, so please consult your cloud "
"provider’s documentation for enabling NLBs for service object type load "
"balancers. When deploying on platforms without NLB support, it may be "
"necessary to modify the health checks for the load balancer to register "
"the ingress gateway."
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:46
msgid ""
"A **Root CA**. Cross cluster communication requires mutual TLS connection"
" between services. To enable mutual TLS communication across clusters, "
"each cluster’s Citadel will be configured with intermediate CA "
"credentials generated by a shared root CA. For illustration purposes, you"
" use a sample root CA certificate available in the Istio installation "
"under the ``samples/certs`` directory."
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:54
msgid "Deploy the Istio control plane in each cluster"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:56
msgid ""
"Generate intermediate CA certificates for each cluster’s Citadel from "
"your organization’s root CA. The shared root CA enables mutual TLS "
"communication across different clusters."
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:60
msgid ""
"For illustration purposes, the following instructions use the "
"certificates from the Istio samples directory for both clusters. In real "
"world deployments, you would likely use a different CA certificate for "
"each cluster, all signed by a common root CA."
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:65
msgid ""
"Run the following commands in **every cluster** to deploy an identical "
"Istio control plane configuration in all of them."
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:70
msgid ""
"Make sure that the current user has cluster administrator (``cluster-"
"admin``) permissions and grant them if not. On the GKE platform, for "
"example, the following command can be used:"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:77
msgid ""
"cluster-admin-binding –clusterrole=cluster-admin –user=“$(gcloud config "
"get-value core/account)”"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:82
msgid ""
"Create a Kubernetes secret for your generated CA certificates using a "
"command similar to the following. See `Certificate Authority (CA) "
"certificates </docs/tasks/security/citadel-config/plugin-ca-cert"
"/#plugging-in-the-existing-certificate-and-key>`_ for more details."
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:102
msgid "The root and intermediate certificate from the"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:91
msgid ""
"samples directory are widely distributed and known. Do **not** use these "
"certificates in production as your clusters would then be open to "
"security vulnerabilities and compromise."
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst
#: ../../source/docs/setup/install/multicluster/gateways/index.rst:365
#: ../../source/docs/setup/install/multicluster/gateways/index.rst:466
msgid ".. code:: sh"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:97
msgid "$ kubectl create namespace istio-system $"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:98
msgid "kubectl create secret generic cacerts -n istio-system"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst
msgid "–from-file=@samples/certs/ca-cert.pem@"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst
msgid "–from-file=@samples/certs/ca-key.pem@"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst
msgid "–from-file=@samples/certs/root-cert.pem@"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst
msgid "–from-file=@samples/certs/cert-chain.pem@"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:104
msgid "Install Istio:"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:108
msgid "$ istioctl manifest apply | -f"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:110
msgid ""
"install/kubernetes/operator/examples/multicluster/values-istio-"
"multicluster-gateways.yaml"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:113
msgid ""
"For further details and customization options, refer to the `installation"
" instructions </docs/setup/install/istioctl/>`_."
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:117
msgid "Setup DNS"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:119
msgid ""
"Providing DNS resolution for services in remote clusters will allow "
"existing applications to function unmodified, as applications typically "
"expect to resolve services by their DNS names and access the resulting "
"IP. Istio itself does not use the DNS for routing requests between "
"services. Services local to a cluster share a common DNS suffix (e.g., "
"``svc.cluster.local``). Kubernetes DNS provides DNS resolution for these "
"services."
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:127
msgid ""
"To provide a similar setup for services from remote clusters, you name "
"services from remote clusters in the format "
"``<name>.<namespace>.global``. Istio also ships with a CoreDNS server "
"that will provide DNS resolution for these services. In order to utilize "
"this DNS, Kubernetes’ DNS must be configured to ``stub a domain`` for "
"``.global``."
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:136
msgid "Some cloud providers have different specific"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:137
msgid ""
"``DNS domain stub`` capabilities and procedures for their Kubernetes "
"services. Reference the cloud provider’s documentation to determine how "
"to ``stub DNS domains`` for each unique environment. The objective of "
"this bash is to stub a domain for ``.global`` on port ``53`` to reference"
" or proxy the ``istiocoredns`` service in Istio’s service namespace."
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:144
msgid ""
"Create one of the following ConfigMaps, or update an existing one, in "
"each cluster that will be calling services in remote clusters (every "
"cluster in the general case):"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:148
msgid ""
"{{< tabset category-name=“platform” >}} {{< tab name=“KubeDNS” category-"
"value=“kube-dns” >}}"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:154
msgid ""
"ConfigMap metadata: name: kube-dns namespace: kube-system data: "
"stubDomains: \\| {“global”: [“$(kubectl get svc -n istio-system "
"istiocoredns -o jsonpath={.spec.clusterIP})”]} EOF"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:158
#: ../../source/docs/setup/install/multicluster/gateways/index.rst:172
#: ../../source/docs/setup/install/multicluster/gateways/index.rst:186
#: ../../source/docs/setup/install/multicluster/gateways/index.rst:385
#: ../../source/docs/setup/install/multicluster/gateways/index.rst:403
msgid "{{< /tab >}}"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:160
msgid "{{< tab name=“CoreDNS (< 1.4.0)” category-value=“coredns-prev-1.4.0” >}}"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:165
msgid ""
"ConfigMap metadata: name: coredns namespace: kube-system data: Corefile: "
"\\| .:53 { errors health kubernetes cluster.local in-addr.arpa ip6.arpa {"
" pods insecure upstream fallthrough in-addr.arpa ip6.arpa } prometheus "
":9153 proxy . /etc/resolv.conf cache 30 loop reload loadbalance } "
"global:53 { errors cache 30 proxy . $(kubectl get svc -n istio-system "
"istiocoredns -o jsonpath={.spec.clusterIP}) } EOF"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:174
msgid "{{< tab name=“CoreDNS (== 1.4.0)” cookie-value=“coredns-1.4.0” >}}"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:179
msgid ""
"ConfigMap metadata: name: coredns namespace: kube-system data: Corefile: "
"\\| .:53 { errors health kubernetes cluster.local in-addr.arpa ip6.arpa {"
" pods insecure upstream fallthrough in-addr.arpa ip6.arpa } prometheus "
":9153 forward . /etc/resolv.conf cache 30 loop reload loadbalance } "
"global:53 { errors cache 30 forward . $(kubectl get svc -n istio-system "
"istiocoredns -o jsonpath={.spec.clusterIP}):53 } EOF"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:188
msgid "{{< tab name=“CoreDNS (>= 1.4.0)” cookie-value=“coredns-after-1.4.0” >}}"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:193
msgid ""
"ConfigMap metadata: name: coredns namespace: kube-system data: Corefile: "
"\\| .:53 { errors health ready kubernetes cluster.local in-addr.arpa "
"ip6.arpa { pods insecure upstream fallthrough in-addr.arpa ip6.arpa } "
"prometheus :9153 forward . /etc/resolv.conf cache 30 loop reload "
"loadbalance } global:53 { errors cache 30 forward . $(kubectl get svc -n "
"istio-system istiocoredns -o jsonpath={.spec.clusterIP}):53 } EOF"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:200
msgid "{{< /tab >}} {{< /tabset >}}"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:203
msgid "Configure application services"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:205
msgid ""
"Every service in a given cluster that needs to be accessed from a "
"different remote cluster requires a ``ServiceEntry`` configuration in the"
" remote cluster. The host used in the service entry should be of the form"
" ``<name>.<namespace>.global`` where name and namespace correspond to the"
" service’s name and namespace respectively."
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:211
#, python-format
msgid ""
"To demonstrate cross cluster access, configure the `sleep service "
"<%7B%7B%3C%20github_tree%20%3E%7D%7D/samples/sleep>`_ running in one "
"cluster to call the `httpbin "
"<%7B%7B%3C%20github_tree%20%3E%7D%7D/samples/httpbin>`_ service running "
"in a second cluster. Before you begin:"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:217
msgid ""
"Choose two of your Istio clusters, to be referred to as ``cluster1`` and "
"``cluster2``."
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:220
msgid "{{< boilerplate kubectl-multicluster-contexts >}}"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:223
msgid "Configure the example services"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:225
msgid "Deploy the ``sleep`` service in ``cluster1``."
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:230
msgid ""
"foo $ kubectl label –context=$CTX_CLUSTER1 namespace foo istio-"
"injection=enabled $ kubectl apply –context=$CTX_CLUSTER1 -n foo -f "
"@samples/sleep/sleep.yaml@ $ export SLEEP_POD=\\ :math:`(kubectl get "
"--context=`\\ CTX_CLUSTER1 -n foo pod -l app=sleep -o "
"jsonpath={.items..metadata.name})"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:236
msgid "Deploy the ``httpbin`` service in ``cluster2``."
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:241
msgid ""
"bar $ kubectl label –context=$CTX_CLUSTER2 namespace bar istio-"
"injection=enabled $ kubectl apply –context=$CTX_CLUSTER2 -n bar -f "
"@samples/httpbin/httpbin.yaml@"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:245
msgid "Export the ``cluster2`` gateway address:"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:249
#: ../../source/docs/setup/install/multicluster/gateways/index.rst:367
msgid "$ export"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:250
msgid ""
"CLUSTER2_GW_ADDR=\\ :math:`(kubectl get --context=`\\ CTX_CLUSTER2 svc "
"–selector=app=istio-ingressgateway"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst
msgid ""
"-n istio-system -o "
"jsonpath=‘{.items[0].status.loadBalancer.ingress[0].ip}’) {{< /text >}}"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:256
msgid ""
"This command sets the value to the gateway’s public IP, but note that you"
" can set it to a DNS name instead, if you have one."
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:261
msgid ""
"If ``cluster2`` is running in an environment that does not support "
"external load balancers, you will need to use a nodePort to access the "
"gateway. Instructions for obtaining the IP to use can be found in the "
"`Control Ingress Traffic </docs/tasks/traffic-management/ingress/ingress-"
"control/#determining-the-ingress-ip-and-ports>`_ guide. You will also "
"need to change the service entry endpoint port in the following step from"
" 15443 to its corresponding nodePort (i.e., ``kubectl "
"--context=$CTX_CLUSTER2 get svc -n istio-system istio-ingressgateway "
"-o=jsonpath='{.spec.ports[?(@.port==15443)].nodePort}'``)."
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:271
msgid "Create a service entry for the ``httpbin`` service in ``cluster1``."
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:273
msgid ""
"To allow ``sleep`` in ``cluster1`` to access ``httpbin`` in ``cluster2``,"
" we need to create a service entry for it. The host name of the service "
"entry should be of the form ``<name>.<namespace>.global`` where name and "
"namespace correspond to the remote service’s name and namespace "
"respectively."
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:279
msgid ""
"For DNS resolution for services under the ``*.global`` domain, you need "
"to assign these services an IP address."
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:284
msgid ""
"Each service (in the ``.global`` DNS domain) must have a unique IP within"
" the cluster."
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:287
msgid ""
"If the global services have actual VIPs, you can use those, but otherwise"
" we suggest using IPs from the class E addresses range ``240.0.0.0/4``. "
"Application traffic for these IPs will be captured by the sidecar and "
"routed to the appropriate remote service."
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:294
msgid ""
"Multicast addresses (224.0.0.0 ~ 239.255.255.255) should not be used "
"because there is no route to them by default. Loopback addresses "
"(127.0.0.0/8) should also not be used because traffic sent to them may be"
" redirected to the sidecar inbound listener."
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:303
msgid ""
"<<EOF apiVersion: networking.istio.io/v1alpha3 kind: ServiceEntry "
"metadata: name: httpbin-bar spec: hosts: # must be of form "
"name.namespace.global"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:307
msgid ""
"httpbin.bar.global # Treat remote cluster services as part of the service"
" mesh # as all clusters in the service mesh share the same root of trust."
" location: MESH_INTERNAL ports:"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:310
msgid ""
"name: http1 number: 8000 protocol: http resolution: DNS addresses: # the "
"IP address to which httpbin.bar.global will resolve to # must be unique "
"for each remote service, within a given cluster. # This address need not "
"be routable. Traffic for this IP will be captured # by the sidecar and "
"routed appropriately."
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:315
msgid ""
"240.0.0.2 endpoints: # This is the routable address of the ingress "
"gateway in cluster2 that # sits in front of sleep.foo service. Traffic "
"from the sidecar will be # routed to this address."
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:318
msgid ""
"address: ${CLUSTER2_GW_ADDR} ports: http1: 15443 # Do not change this "
"port value EOF"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:321
msgid ""
"The configurations above will result in all traffic in ``cluster1`` for "
"``httpbin.bar.global`` on *any port* to be routed to the endpoint "
"``<IPofCluster2IngressGateway>:15443`` over a mutual TLS connection."
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:325
msgid ""
"The gateway for port 15443 is a special SNI-aware Envoy preconfigured and"
" installed when you deployed the Istio control plane in the cluster. "
"Traffic entering port 15443 will be load balanced among pods of the "
"appropriate internal service of the target cluster (in this case, "
"``httpbin.bar`` in ``cluster2``)."
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:333
msgid "Do not create a ``Gateway`` configuration for port 15443."
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:336
msgid "Verify that ``httpbin`` is accessible from the ``sleep`` service."
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:341
msgid "foo -c sleep – curl -I httpbin.bar.global:8000/headers"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:344
msgid "Send remote traffic via an egress gateway"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:346
msgid ""
"If you want to route traffic from ``cluster1`` via a dedicated egress "
"gateway, instead of directly from the sidecars, use the following service"
" entry for ``httpbin.bar`` instead of the one in the previous section."
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:353
msgid "The egress gateway used in this configuration cannot also be"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:354
msgid "used for other, non inter-cluster, egress traffic."
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:356
msgid ""
"If ``$CLUSTER2_GW_ADDR`` is an IP address, use the ``$CLUSTER2_GW_ADDR - "
"IP address`` option. If ``$CLUSTER2_GW_ADDR`` is a hostname, use the "
"``$CLUSTER2_GW_ADDR - hostname`` option."
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:360
msgid "{{< tabset category-name=“profile” >}}"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:362
msgid ""
"{{< tab name=“$CLUSTER2_GW_ADDR - IP address” category-value=“option1” "
">}} \\* Export the ``cluster1`` egress gateway address:"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:368
msgid ""
"CLUSTER1_EGW_ADDR=\\ :math:`(kubectl get --context=`\\ CTX_CLUSTER1 svc "
"–selector=app=istio-egressgateway"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:370
msgid "-n istio-system -o yaml -o jsonpath=‘{.items[0].spec.clusterIP}’)"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:372
msgid "Apply the httpbin-bar service entry:"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:377
msgid ""
"<<EOF apiVersion: networking.istio.io/v1alpha3 kind: ServiceEntry "
"metadata: name: httpbin-bar spec: hosts: # must be of form "
"name.namespace.global - httpbin.bar.global location: MESH_INTERNAL ports:"
" - name: http1 number: 8000 protocol: http resolution: STATIC addresses: "
"- 240.0.0.2 endpoints: - address: ${CLUSTER2_GW_ADDR} network: external "
"ports: http1: 15443 # Do not change this port value - address: "
"${CLUSTER1_EGW_ADDR} ports: http1: 15443 EOF"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:387
msgid ""
"{{< tab name=\"\\ :math:`CLUSTER2_GW_ADDR - hostname\" category-"
"value=\"option2\" >}} If the ``\\ {CLUSTER2_GW_ADDR}``is a hostname, you "
"can use``\\ resolution: DNS\\` for the endpoint resolution:"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:394
msgid ""
"<<EOF apiVersion: networking.istio.io/v1alpha3 kind: ServiceEntry "
"metadata: name: httpbin-bar spec: hosts: # must be of form "
"name.namespace.global - httpbin.bar.global location: MESH_INTERNAL ports:"
" - name: http1 number: 8000 protocol: http resolution: DNS addresses: - "
"240.0.0.2 endpoints: - address: ${CLUSTER2_GW_ADDR} network: external "
"ports: http1: 15443 # Do not change this port value - address: istio-"
"egressgateway.istio-system.svc.cluster.local ports: http1: 15443 EOF"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:405
msgid "{{< /tabset >}}"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:408
msgid "Cleanup the example"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:410
msgid "Execute the following commands to clean up the example services."
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:412
msgid "Cleanup ``cluster1``:"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:417
msgid ""
"@samples/sleep/sleep.yaml@ $ kubectl delete –context=$CTX_CLUSTER1 -n foo"
" serviceentry httpbin-bar $ kubectl delete –context=$CTX_CLUSTER1 ns foo"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:421
msgid "Cleanup ``cluster2``:"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:426
msgid ""
"@samples/httpbin/httpbin.yaml@ $ kubectl delete –context=$CTX_CLUSTER2 ns"
" bar"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:429
msgid "Cleanup ``environment variables``:"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:434
msgid "CLUSTER1_EGW_ADDR CTX_CLUSTER1 CTX_CLUSTER2"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:437
msgid "Version-aware routing to remote services"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:439
msgid ""
"If the remote service has multiple versions, you can add labels to the "
"service entry endpoints. For example:"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:445
msgid ""
"<<EOF apiVersion: networking.istio.io/v1alpha3 kind: ServiceEntry "
"metadata: name: httpbin-bar spec: hosts: # must be of form "
"name.namespace.global - httpbin.bar.global location: MESH_INTERNAL ports:"
" - name: http1 number: 8000 protocol: http resolution: DNS addresses: # "
"the IP address to which httpbin.bar.global will resolve to # must be "
"unique for each service. - 240.0.0.2 endpoints: - address: "
"${CLUSTER2_GW_ADDR} labels: cluster: cluster2 ports: http1: 15443 # Do "
"not change this port value EOF"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:454
msgid ""
"You can then create virtual services and destination rules to define "
"subsets of the ``httpbin.bar.global`` service using the appropriate "
"gateway label selectors. The instructions are the same as those used for "
"routing to a local service. See `multicluster version routing </blog/2019"
"/multicluster-version-routing/>`_ for a complete example."
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:462
msgid "Uninstalling"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:464
msgid "Uninstall Istio by running the following commands on **every cluster**:"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:468
msgid "$ istioctl manifest generate"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:470
msgid ""
"-f install/kubernetes/operator/examples/multicluster/values-istio-"
"multicluster-gateways.yaml"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:471
msgid "\\| kubectl delete -f -"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:474
msgid "Summary"
msgstr ""

#: ../../source/docs/setup/install/multicluster/gateways/index.rst:476
msgid ""
"Using Istio gateways, a common root CA, and service entries, you can "
"configure a single Istio service mesh across multiple Kubernetes "
"clusters. Once configured this way, traffic can be transparently routed "
"to remote clusters without any application involvement. Although this "
"approach requires a certain amount of manual configuration for remote "
"service access, the service entry creation process could be automated."
msgstr ""

