# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, BandCamp
# This file is distributed under the same license as the istio-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: istio-docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-03-22 10:08+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:1
msgid ""
"This task shows you how to set up Istio authorization for HTTP traffic in"
" an Istio mesh. Learn more in our `authorization concept page "
"</docs/concepts/security/#authorization>`_."
msgstr ""

#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:6
msgid "Before you begin"
msgstr ""

#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:8
msgid "The activities in this task assume that you:"
msgstr ""

#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:10
msgid ""
"Read the `authorization concept "
"</docs/concepts/security/#authorization>`_."
msgstr ""

#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:13
msgid ""
"Follow the `Istio installation guide </docs/setup/install/istioctl/>`_ to"
" install Istio with mutual TLS enabled."
msgstr ""

#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:17
msgid ""
"Deploy the `Bookinfo </docs/examples/bookinfo/#deploying-the-"
"application>`_ sample application."
msgstr ""

#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:21
msgid ""
"After deploying the Bookinfo application, go to the Bookinfo product page"
" at ``http://$GATEWAY_URL/productpage``. On the product page, you can see"
" the following sections:"
msgstr ""

#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:25
msgid ""
"**Book Details** on the lower left side, which includes: book type, "
"number of pages, publisher, etc."
msgstr ""

#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:27
msgid "**Book Reviews** on the lower right of the page."
msgstr ""

#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:29
msgid ""
"When you refresh the page, the app shows different versions of reviews in"
" the product page. The app presents the reviews in a round robin style: "
"red stars, black stars, or no stars."
msgstr ""

#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:35
msgid "If you don’t see the expected output in the browser as you"
msgstr ""

#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:36
msgid ""
"follow the task, retry in a few more seconds because some delay is "
"possible due to caching and other propagation overhead."
msgstr ""

#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:41
msgid "This task requires mutual TLS enabled because the"
msgstr ""

#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:42
msgid ""
"following examples use principal and namespace in the policies. {{< "
"/warning >}}"
msgstr ""

#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:46
msgid "Configure access control for workloads using HTTP traffic"
msgstr ""

#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:48
msgid ""
"Using Istio, you can easily setup access control for {{< gloss “workload”"
" >}}workloads{{< /gloss >}} in your mesh. This task shows you how to set "
"up access control using Istio authorization. First, you configure a "
"simple ``deny-all`` policy that rejects all requests to the workload, and"
" then grant more access to the workload gradually and incrementally."
msgstr ""

#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:55
msgid ""
"Run the following command to create a ``deny-all`` policy in the "
"``default`` namespace. The policy doesn’t have a ``selector`` field, "
"which applies the policy to every workload in the ``default`` namespace. "
"The ``spec:`` field of the policy has the empty value ``{}``. That value "
"means that no traffic is permitted, effectively denying all requests."
msgstr ""

#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:65
msgid ""
"security.istio.io/v1beta1 kind: AuthorizationPolicy metadata: name: deny-"
"all namespace: default spec: {} EOF"
msgstr ""

#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:68
msgid ""
"Point your browser at the Bookinfo ``productpage`` "
"(``http://$GATEWAY_URL/productpage``). You should see ``\"RBAC: access "
"denied\"``. The error shows that the configured ``deny-all`` policy is "
"working as intended, and Istio doesn’t have any rules that allow any "
"access to workloads in the mesh."
msgstr ""

#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:74
msgid ""
"Run the following command to create a ``productpage-viewer`` policy to "
"allow access with ``GET`` method to the ``productpage`` workload. The "
"policy does not set the ``from`` field in the ``rules`` which means all "
"sources are allowed, effectively allowing all users and workloads:"
msgstr ""

#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:83
msgid ""
"“security.istio.io/v1beta1” kind: “AuthorizationPolicy” metadata: name: "
"“productpage-viewer” namespace: default spec: selector: matchLabels: app:"
" productpage rules:"
msgstr ""

#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:87
msgid "to:"
msgstr ""

#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:89
#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:120
#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:138
#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:168
msgid "operation: methods: [“GET”] EOF"
msgstr ""

#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:91
msgid ""
"Point your browser at the Bookinfo ``productpage`` "
"(``http://$GATEWAY_URL/productpage``). Now you should see the “Bookinfo "
"Sample” page. However, you can see the following errors on the page:"
msgstr ""

#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:96
msgid "``Error fetching product details``"
msgstr ""

#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:97
msgid "``Error fetching product reviews`` on the page."
msgstr ""

#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:99
msgid ""
"These errors are expected because we have not granted the ``productpage``"
" workload access to the ``details`` and ``reviews`` workloads. Next, you "
"need to configure a policy to grant access to those workloads."
msgstr ""

#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:104
msgid ""
"Run the following command to create the ``details-viewer`` policy to "
"allow the ``productpage`` workload, which issues requests using the "
"``cluster.local/ns/default/sa/bookinfo-productpage`` service account, to "
"access the ``details`` workload through ``GET`` methods:"
msgstr ""

#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:112
msgid ""
"“security.istio.io/v1beta1” kind: “AuthorizationPolicy” metadata: name: "
"“details-viewer” namespace: default spec: selector: matchLabels: app: "
"details rules:"
msgstr ""

#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:116
#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:134
#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:164
msgid "from:"
msgstr ""

#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:118
#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:136
msgid ""
"source: principals: [“cluster.local/ns/default/sa/bookinfo-productpage”] "
"to:"
msgstr ""

#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:122
msgid ""
"Run the following command to create a policy ``reviews-viewer`` to allow "
"the ``productpage`` workload, which issues requests using the "
"``cluster.local/ns/default/sa/bookinfo-productpage`` service account, to "
"access the ``reviews`` workload through ``GET`` methods:"
msgstr ""

#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:130
msgid ""
"“security.istio.io/v1beta1” kind: “AuthorizationPolicy” metadata: name: "
"“reviews-viewer” namespace: default spec: selector: matchLabels: app: "
"reviews rules:"
msgstr ""

#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:140
msgid ""
"Point your browser at the Bookinfo ``productpage`` "
"(``http://$GATEWAY_URL/productpage``). Now, you should see the “Bookinfo "
"Sample” page with “Book Details” on the lower left part, and “Book "
"Reviews” on the lower right part. However, in the “Book Reviews” section,"
" there is an error ``Ratings service currently unavailable``."
msgstr ""

#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:147
msgid ""
"This is because the ``reviews`` workload doesn’t have permission to "
"access the ``ratings`` workload. To fix this issue, you need to grant the"
" ``reviews`` workload access to the ``ratings`` workload. Next, we "
"configure a policy to grant the ``reviews`` workload that access."
msgstr ""

#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:152
msgid ""
"Run the following command to create the ``ratings-viewer`` policy to "
"allow the ``reviews`` workload, which issues requests using the "
"``cluster.local/ns/default/sa/bookinfo-reviews`` service account, to "
"access the ``ratings`` workload through ``GET`` methods:"
msgstr ""

#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:160
msgid ""
"“security.istio.io/v1beta1” kind: “AuthorizationPolicy” metadata: name: "
"“ratings-viewer” namespace: default spec: selector: matchLabels: app: "
"ratings rules:"
msgstr ""

#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:166
msgid "source: principals: [“cluster.local/ns/default/sa/bookinfo-reviews”] to:"
msgstr ""

#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:170
msgid ""
"Point your browser at the Bookinfo ``productpage`` "
"(``http://$GATEWAY_URL/productpage``). You should see the “black” and "
"“red” ratings in the “Book Reviews” section."
msgstr ""

#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:174
msgid ""
"**Congratulations!** You successfully applied authorization policy to "
"enforce access control for workloads using HTTP traffic."
msgstr ""

#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:178
msgid "Clean up"
msgstr ""

#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:180
msgid "Remove all authorization policies from your configuration:"
msgstr ""

#: ../../source/docs/tasks/security/authorization/authz-http/index.rst:185
msgid ""
"authorizationpolicy.security.istio.io/deny-all $ kubectl delete "
"authorizationpolicy.security.istio.io/productpage-viewer $ kubectl delete"
" authorizationpolicy.security.istio.io/details-viewer $ kubectl delete "
"authorizationpolicy.security.istio.io/reviews-viewer $ kubectl delete "
"authorizationpolicy.security.istio.io/ratings-viewer {{< /text >}}"
msgstr ""

