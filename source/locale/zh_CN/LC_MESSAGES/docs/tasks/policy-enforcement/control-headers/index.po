# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, BandCamp
# This file is distributed under the same license as the istio-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: istio-docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-03-22 10:08+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../source/docs/tasks/policy-enforcement/control-headers/index.rst:2
msgid "control-headers"
msgstr ""

#: ../../source/docs/tasks/policy-enforcement/control-headers/index.rst:6
msgid "The mixer policy is deprecated in Istio 1.5 and not"
msgstr ""

#: ../../source/docs/tasks/policy-enforcement/control-headers/index.rst:7
msgid "recommended for production usage."
msgstr ""

#: ../../source/docs/tasks/policy-enforcement/control-headers/index.rst:9
msgid ""
"Consider using Envoy `ext_authz filter "
"<https://www.envoyproxy.io/docs/envoy/v1.13.0/intro/arch_overview/security/ext_authz_filter>`_,"
" `lua`` filter "
"<https://www.envoyproxy.io/docs/envoy/v1.13.0/configuration/http/http_filters/lua_filter>`_,"
" or write a filter using the `Envoy-wasm sandbox "
"<https://github.com/envoyproxy/envoy-"
"wasm/tree/master/test/extensions/filters/http/wasm/test_data>`_."
msgstr ""

#: ../../source/docs/tasks/policy-enforcement/control-headers/index.rst:17
msgid ""
"This task demonstrates how to use a policy adapter to manipulate request "
"headers and routing."
msgstr ""

#: ../../source/docs/tasks/policy-enforcement/control-headers/index.rst:21
msgid "Before you begin"
msgstr ""

#: ../../source/docs/tasks/policy-enforcement/control-headers/index.rst:23
msgid ""
"Set up Istio on Kubernetes by following the instructions in the "
"`Installation guide </docs/setup/>`_."
msgstr ""

#: ../../source/docs/tasks/policy-enforcement/control-headers/index.rst:28
msgid ""
"Policy enforcement **must** be enabled in your cluster for this task. "
"Follow the steps in `Enabling Policy Enforcement </docs/tasks/policy-"
"enforcement/enabling-policy/>`_ to ensure that policy enforcement is "
"enabled."
msgstr ""

#: ../../source/docs/tasks/policy-enforcement/control-headers/index.rst:33
msgid ""
"Follow the set-up instructions in the `ingress task </docs/tasks/traffic-"
"management/ingress/>`_ to configure an ingress using a gateway."
msgstr ""

#: ../../source/docs/tasks/policy-enforcement/control-headers/index.rst:37
msgid ""
"Customize the `virtual service </docs/reference/config/networking"
"/virtual-service/>`_ configuration for the ``httpbin`` service containing"
" two route rules that allow traffic for paths ``/headers`` and "
"``/status``:"
msgstr ""

#: ../../source/docs/tasks/policy-enforcement/control-headers/index.rst:45
msgid ""
"networking.istio.io/v1alpha3 kind: VirtualService metadata: name: httpbin"
" spec: hosts: - \"*\" gateways: - httpbin-gateway http: - match: - uri: "
"prefix: /headers - uri: prefix: /status route: - destination: port: "
"number: 8000 host: httpbin EOF"
msgstr ""

#: ../../source/docs/tasks/policy-enforcement/control-headers/index.rst:51
msgid "Output-producing adapters"
msgstr ""

#: ../../source/docs/tasks/policy-enforcement/control-headers/index.rst:53
msgid ""
"In this task, we are using a sample policy adapter ``keyval``. In "
"addition to a policy check result, this adapter returns an output with a "
"single field called ``value``. The adapter is configured with a lookup "
"table, which it uses to populate the output value, or return "
"``NOT_FOUND`` error status if the input instance key is not present in "
"the lookup table."
msgstr ""

#: ../../source/docs/tasks/policy-enforcement/control-headers/index.rst:60
msgid "Deploy the demo adapter:"
msgstr ""

#: ../../source/docs/tasks/policy-enforcement/control-headers/index.rst:65
msgid ""
"–image=gcr.io/istio-testing/keyval:release-1.1 –namespace istio-system "
"–port 9070 –expose"
msgstr ""

#: ../../source/docs/tasks/policy-enforcement/control-headers/index.rst:68
msgid ""
"Enable the ``keyval`` adapter by deploying its template and configuration"
" descriptors:"
msgstr ""

#: ../../source/docs/tasks/policy-enforcement/control-headers/index.rst:74
msgid ""
"@samples/httpbin/policy/keyval-template.yaml@ $ kubectl apply -f "
"@samples/httpbin/policy/keyval.yaml@"
msgstr ""

#: ../../source/docs/tasks/policy-enforcement/control-headers/index.rst:77
msgid "Create a handler for the demo adapter with a fixed lookup table:"
msgstr ""

#: ../../source/docs/tasks/policy-enforcement/control-headers/index.rst:82
msgid ""
"config.istio.io/v1alpha2 kind: handler metadata: name: keyval namespace: "
"istio-system spec: adapter: keyval connection: address: keyval:9070 "
"params: table: jason: admin EOF"
msgstr ""

#: ../../source/docs/tasks/policy-enforcement/control-headers/index.rst:86
msgid ""
"Create an instance for the handler with the ``user`` request header as a "
"lookup key:"
msgstr ""

#: ../../source/docs/tasks/policy-enforcement/control-headers/index.rst:92
msgid ""
"config.istio.io/v1alpha2 kind: instance metadata: name: keyval namespace:"
" istio-system spec: template: keyval params: key: request.headers[“user”]"
" \\| \"\" EOF"
msgstr ""

#: ../../source/docs/tasks/policy-enforcement/control-headers/index.rst:97
msgid "Request header operations"
msgstr ""

#: ../../source/docs/tasks/policy-enforcement/control-headers/index.rst:99
msgid "Ensure the *httpbin* service is accessible through the ingress gateway:"
msgstr ""

#: ../../source/docs/tasks/policy-enforcement/control-headers/index.rst:105
msgid ""
"http://\\ :math:`INGRESS_HOST:`\\ INGRESS_PORT/headers { “headers”: { "
"“Accept”: “*/*”, “Content-Length”: “0”, … “X-Envoy-Internal”: “true” } }"
msgstr ""

#: ../../source/docs/tasks/policy-enforcement/control-headers/index.rst:109
msgid ""
"The output should be the request headers as they are received by the "
"*httpbin* service."
msgstr ""

#: ../../source/docs/tasks/policy-enforcement/control-headers/index.rst:112
msgid "Create a rule for the demo adapter:"
msgstr ""

#: ../../source/docs/tasks/policy-enforcement/control-headers/index.rst:117
msgid ""
"config.istio.io/v1alpha2 kind: rule metadata: name: keyval namespace: "
"istio-system spec: actions:"
msgstr ""

#: ../../source/docs/tasks/policy-enforcement/control-headers/index.rst:120
msgid ""
"handler: keyval.istio-system instances: [ keyval ] name: x "
"requestHeaderOperations:"
msgstr ""

#: ../../source/docs/tasks/policy-enforcement/control-headers/index.rst:122
msgid "name: user-group values: [ x.output.value ] EOF"
msgstr ""

#: ../../source/docs/tasks/policy-enforcement/control-headers/index.rst:124
msgid ""
"Issue a new request to the ingress gateway with the header ``key`` set to"
" value ``jason``:"
msgstr ""

#: ../../source/docs/tasks/policy-enforcement/control-headers/index.rst:130
msgid ""
"http://\\ :math:`INGRESS_HOST:`\\ INGRESS_PORT/headers { “headers”: { "
"“Accept”: “*/*”, “Content-Length”: “0”, “User”: “jason”, “User-Agent”: "
"“curl/7.58.0”, “User-Group”: “admin”, … “X-Envoy-Internal”: “true” } }"
msgstr ""

#: ../../source/docs/tasks/policy-enforcement/control-headers/index.rst:135
msgid ""
"Note the presence of the ``user-group`` header with the value derived "
"from the rule application of the adapter. The expression "
"``x.output.value`` in the rule evaluates to the populated ``value`` field"
" returned by the ``keyval`` adapter."
msgstr ""

#: ../../source/docs/tasks/policy-enforcement/control-headers/index.rst:140
msgid ""
"Modify the rule to rewrite the URI path to a different virtual service "
"route if the check succeeds:"
msgstr ""

#: ../../source/docs/tasks/policy-enforcement/control-headers/index.rst:146
msgid ""
"config.istio.io/v1alpha2 kind: rule metadata: name: keyval namespace: "
"istio-system spec: match: source.labels[“istio”] == “ingressgateway” "
"actions:"
msgstr ""

#: ../../source/docs/tasks/policy-enforcement/control-headers/index.rst:150
msgid ""
"handler: keyval.istio-system instances: [ keyval ] "
"requestHeaderOperations:"
msgstr ""

#: ../../source/docs/tasks/policy-enforcement/control-headers/index.rst:152
msgid "name: :path values: [ ‘“/status/418”’ ] EOF"
msgstr ""

#: ../../source/docs/tasks/policy-enforcement/control-headers/index.rst:154
msgid "Repeat the request to the ingress gateway:"
msgstr ""

#: ../../source/docs/tasks/policy-enforcement/control-headers/index.rst:159
msgid ""
"http://\\ :math:`INGRESS_HOST:`\\ INGRESS_PORT/headers HTTP/1.1 418 "
"Unknown server: istio-envoy …"
msgstr ""

#: ../../source/docs/tasks/policy-enforcement/control-headers/index.rst:162
msgid ""
"Note that the ingress gateway changed the route *after* the rule "
"application of the policy adapter. The modified request may use a "
"different route and destination and is subject to the traffic management "
"configuration."
msgstr ""

#: ../../source/docs/tasks/policy-enforcement/control-headers/index.rst:167
msgid ""
"The modified request is not checked again by the policy engine within the"
" same proxy. Therefore, we recommend to use this feature in gateways, so "
"that the server-side policy checks take effect."
msgstr ""

#: ../../source/docs/tasks/policy-enforcement/control-headers/index.rst:172
msgid "Cleanup"
msgstr ""

#: ../../source/docs/tasks/policy-enforcement/control-headers/index.rst:174
msgid "Delete the policy resources for the demo adapter:"
msgstr ""

#: ../../source/docs/tasks/policy-enforcement/control-headers/index.rst:179
msgid ""
"instance/keyval adapter/keyval template/keyval -n istio-system $ kubectl "
"delete service keyval -n istio-system $ kubectl delete deployment keyval "
"-n istio-system"
msgstr ""

#: ../../source/docs/tasks/policy-enforcement/control-headers/index.rst:183
msgid ""
"Complete the clean-up instructions in `ingress task </docs/tasks/traffic-"
"management/ingress/>`_."
msgstr ""

