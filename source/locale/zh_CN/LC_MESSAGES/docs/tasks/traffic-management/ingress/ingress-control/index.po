# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, BandCamp
# This file is distributed under the same license as the istio-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: istio-docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-03-22 10:08+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:2
msgid "Ingress Gateways"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:4
msgid ""
"In a Kubernetes environment, the `Kubernetes Ingress Resource "
"<https://kubernetes.io/docs/concepts/services-networking/ingress/>`_ is "
"used to specify services that should be exposed outside the cluster. In "
"an Istio service mesh, a better approach (which also works in both "
"Kubernetes and other environments) is to use a different configuration "
"model, namely `Istio Gateway "
"</docs/reference/config/networking/gateway/>`_. A ``Gateway`` allows "
"Istio features such as monitoring and route rules to be applied to "
"traffic entering the cluster."
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:14
msgid ""
"This task describes how to configure Istio to expose a service outside of"
" the service mesh using an Istio ``Gateway``."
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:18
msgid "Before you begin"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:20
msgid ""
"Setup Istio by following the instructions in the `Installation guide "
"</docs/setup/>`_."
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:23
msgid "Make sure your current directory is the ``istio`` directory."
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:25
msgid "{{< boilerplate start-httpbin-service >}}"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:27
msgid ""
"Determine the ingress IP and ports as described in the following "
"subsection."
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:31
msgid "Determining the ingress IP and ports"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:33
msgid ""
"Execute the following command to determine if your Kubernetes cluster is "
"running in an environment that supports external load balancers:"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:39
msgid ""
"NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE istio-ingressgateway "
"LoadBalancer 172.21.109.129 130.211.10.121 "
"80:31380/TCP,443:31390/TCP,31400:31400/TCP 17h"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:43
msgid ""
"If the ``EXTERNAL-IP`` value is set, your environment has an external "
"load balancer that you can use for the ingress gateway. If the "
"``EXTERNAL-IP`` value is ``<none>`` (or perpetually ``<pending>``), your "
"environment does not provide an external load balancer for the ingress "
"gateway. In this case, you can access the gateway using the service’s "
"`node port <https://kubernetes.io/docs/concepts/services-"
"networking/service/#nodeport>`_."
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:51
msgid "Choose the instructions corresponding to your environment:"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:53
msgid "{{< tabset category-name=“gateway-ip” >}}"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:55
msgid "{{< tab name=“external load balancer” category-value=“external-lb” >}}"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:57
msgid ""
"Follow these instructions if you have determined that your environment "
"has an external load balancer."
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:60
msgid "Set the ingress IP and ports:"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:65
msgid ""
"service istio-ingressgateway -o "
"jsonpath=‘{.status.loadBalancer.ingress[0].ip}’) $ export "
"INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway "
"-o jsonpath=‘{.spec.ports[?(@.name==“http2”)].port}’) $ export "
"SECURE_INGRESS_PORT=$(kubectl -n istio-system get service istio-"
"ingressgateway -o jsonpath=‘{.spec.ports[?(@.name==“https”)].port}’)"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:75
msgid "In certain environments, the load balancer may be"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:76
msgid ""
"exposed using a host name, instead of an IP address. In this case, the "
"ingress gateway’s ``EXTERNAL-IP`` value will not be an IP address, but "
"rather a host name, and the above command will have failed to set the "
"``INGRESS_HOST`` environment variable. Use the following command to "
"correct the ``INGRESS_HOST`` value:"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:85
msgid ""
"service istio-ingressgateway -o "
"jsonpath=‘{.status.loadBalancer.ingress[0].hostname}’)"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:90
#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:148
msgid "{{< /tab >}}"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:92
msgid "{{< tab name=“node port” category-value=“node-port” >}}"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:94
msgid ""
"Follow these instructions if you have determined that your environment "
"does not have an external load balancer, so you need to use a node port "
"instead."
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:98
msgid "Set the ingress ports:"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:103
msgid ""
"service istio-ingressgateway -o "
"jsonpath=‘{.spec.ports[?(@.name==“http2”)].nodePort}’) $ export "
"SECURE_INGRESS_PORT=$(kubectl -n istio-system get service istio-"
"ingressgateway -o jsonpath=‘{.spec.ports[?(@.name==“https”)].nodePort}’)"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:109
msgid "Setting the ingress IP depends on the cluster provider:"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:111
msgid "*GKE:*"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:117
msgid ""
"You need to create firewall rules to allow the TCP traffic to the "
"*ingressgateway* service’s ports. Run the following commands to allow the"
" traffic for the HTTP port, the secure port (HTTPS) or both:"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:124
msgid ""
"allow-gateway-http –allow tcp:$INGRESS_PORT $ gcloud compute firewall-"
"rules create allow-gateway-https –allow tcp:$SECURE_INGRESS_PORT"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:128
msgid "*Minikube:*"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:134
msgid "*Docker For Desktop:*"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:140
msgid "*Other environments (e.g., IBM Cloud Private etc):*"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:145
msgid ""
"istio=ingressgateway -n istio-system -o "
"jsonpath=‘{.items[0].status.hostIP}’)"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:150
msgid "{{< /tabset >}}"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:153
msgid "Configuring ingress using an Istio gateway"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:155
msgid ""
"An ingress `Gateway </docs/reference/config/networking/gateway/>`_ "
"describes a load balancer operating at the edge of the mesh that receives"
" incoming HTTP/TCP connections. It configures exposed ports, protocols, "
"etc. but, unlike `Kubernetes Ingress Resources "
"<https://kubernetes.io/docs/concepts/services-networking/ingress/>`_, "
"does not include any traffic routing configuration. Traffic routing for "
"ingress traffic is instead configured using Istio routing rules, exactly "
"in the same way as for internal service requests."
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:164
msgid "Let’s see how you can configure a ``Gateway`` on port 80 for HTTP traffic."
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:167
msgid "Create an Istio ``Gateway``:"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:172
msgid ""
"networking.istio.io/v1alpha3 kind: Gateway metadata: name: httpbin-"
"gateway spec: selector: istio: ingressgateway # use Istio default gateway"
" implementation servers:"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:176
msgid "port: number: 80 name: http protocol: HTTP hosts:"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:178
msgid "“httpbin.example.com” EOF"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:180
msgid "Configure routes for traffic entering via the ``Gateway``:"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:185
msgid ""
"networking.istio.io/v1alpha3 kind: VirtualService metadata: name: httpbin"
" spec: hosts:"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:188
msgid "“httpbin.example.com” gateways:"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:189
msgid "httpbin-gateway http:"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:190
msgid "match:"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:192
msgid "uri: prefix: /status"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:193
msgid "uri: prefix: /delay route:"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:194
msgid "destination: port: number: 8000 host: httpbin EOF"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:196
msgid ""
"You have now created a `virtual service "
"</docs/reference/config/networking/virtual-service/>`_ configuration for "
"the ``httpbin`` service containing two route rules that allow traffic for"
" paths ``/status`` and ``/delay``."
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:201
msgid ""
"The `gateways </docs/reference/config/networking/virtual-service"
"/#VirtualService-gateways>`_ list specifies that only requests through "
"your ``httpbin-gateway`` are allowed. All other external requests will be"
" rejected with a 404 response."
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:209
msgid ""
"Internal requests from other services in the mesh are not subject to "
"these rules but instead will default to round-robin routing. To apply "
"these rules to internal calls as well, you can add the special value "
"``mesh`` to the list of ``gateways``. Since the internal hostname for the"
" service is probably different (e.g., "
"``httpbin.default.svc.cluster.local``) from the external one, you will "
"also need to add it to the ``hosts`` list. Refer to the `operations guide"
" </docs/ops/common-problems/network-issues#route-rules-have-no-effect-on-"
"ingress-gateway-requests>`_ for more details."
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:220
msgid "Access the *httpbin* service using *curl*:"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:225
msgid ""
"http://\\ :math:`INGRESS_HOST:`\\ INGRESS_PORT/status/200 HTTP/1.1 200 OK"
" server: envoy date: Mon, 29 Jan 2018 04:45:49 GMT content-type: "
"text/html; charset=utf-8 access-control-allow-origin: \\* access-control-"
"allow-credentials: true content-length: 0 x-envoy-upstream-service-time: "
"48"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:231
msgid ""
"Note that you use the ``-H`` flag to set the *Host* HTTP header to "
"“httpbin.example.com”. This is needed because your ingress ``Gateway`` is"
" configured to handle “httpbin.example.com”, but in your test environment"
" you have no DNS binding for that host and are simply sending your "
"request to the ingress IP."
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:237
msgid ""
"Access any other URL that has not been explicitly exposed. You should see"
" an HTTP 404 error:"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:243
msgid ""
"http://\\ :math:`INGRESS_HOST:`\\ INGRESS_PORT/headers HTTP/1.1 404 Not "
"Found date: Mon, 29 Jan 2018 04:45:49 GMT server: envoy content-length: 0"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:248
msgid "Accessing ingress services using a browser"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:250
msgid ""
"Entering the ``httpbin`` service URL in a browser won’t work because you "
"can’t pass the *Host* header to a browser like you did with ``curl``. In "
"a real world situation, this is not a problem because you configure the "
"requested host properly and DNS resolvable. Thus, you use the host’s "
"domain name in the URL, for example, "
"``https://httpbin.example.com/status/200``."
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:257
msgid ""
"To work around this problem for simple tests and demos, use a wildcard "
"``*`` value for the host in the ``Gateway`` and ``VirtualService`` "
"configurations. For example, if you change your ingress configuration to "
"the following:"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:265
msgid ""
"networking.istio.io/v1alpha3 kind: Gateway metadata: name: httpbin-"
"gateway spec: selector: istio: ingressgateway # use Istio default gateway"
" implementation servers: - port: number: 80 name: http protocol: HTTP "
"hosts: - “*\" — apiVersion: networking.istio.io/v1alpha3 kind: "
"VirtualService metadata: name: httpbin spec: hosts: - \"*” gateways: - "
"httpbin-gateway http: - match: - uri: prefix: /headers route: - "
"destination: port: number: 8000 host: httpbin EOF"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:273
msgid ""
"You can then use ``$INGRESS_HOST:$INGRESS_PORT`` in the browser URL. For "
"example, ``http://$INGRESS_HOST:$INGRESS_PORT/headers`` will display all "
"the headers that your browser sends."
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:278
msgid "Understanding what happened"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:280
msgid ""
"The ``Gateway`` configuration resources allow external traffic to enter "
"the Istio service mesh and make the traffic management and policy "
"features of Istio available for edge services."
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:284
msgid ""
"In the preceding steps, you created a service inside the service mesh and"
" exposed an HTTP endpoint of the service to external traffic."
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:288
msgid "Troubleshooting"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:290
msgid ""
"Inspect the values of the ``INGRESS_HOST`` and ``INGRESS_PORT`` "
"environment variables. Make sure they have valid values, according to the"
" output of the following commands:"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:297
msgid "INGRESS_HOST=\\ :math:`INGRESS_HOST, INGRESS_PORT=`\\ INGRESS_PORT"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:299
msgid ""
"Check that you have no other Istio ingress gateways defined on the same "
"port:"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:306
msgid ""
"Check that you have no Kubernetes Ingress resources defined on the same "
"IP and port:"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:313
msgid ""
"If you have an external load balancer and it does not work for you, try "
"to `access the gateway using its node port </docs/tasks/traffic-"
"management/ingress/ingress-control/#determining-the-ingress-ip-and-"
"ports>`_."
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:318
msgid "Cleanup"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:320
#, python-format
msgid ""
"Delete the ``Gateway`` and ``VirtualService`` configuration, and shutdown"
" the `httpbin <%7B%7B%3C%20github_tree%20%3E%7D%7D/samples/httpbin>`_ "
"service:"
msgstr ""

#: ../../source/docs/tasks/traffic-management/ingress/ingress-control/index.rst:328
msgid ""
"delete virtualservice httpbin $ kubectl delete –ignore-not-found=true -f "
"@samples/httpbin/httpbin.yaml@"
msgstr ""

