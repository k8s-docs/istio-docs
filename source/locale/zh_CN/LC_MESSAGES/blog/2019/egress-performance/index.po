# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, BandCamp
# This file is distributed under the same license as the istio-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: istio-docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-03-22 10:08+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../source/blog/2019/egress-performance/index.rst:2
msgid "egress-performance"
msgstr ""

#: ../../source/blog/2019/egress-performance/index.rst:4
msgid ""
"The main objective of this investigation was to determine the impact on "
"performance and resource utilization when an egress gateway is added in "
"the service mesh to access an external service (MongoDB, in this case). "
"The steps to configure an egress gateway for an external MongoDB are "
"described in the blog `Consuming External MongoDB Services </blog/2018"
"/egress-mongo/>`_."
msgstr ""

#: ../../source/blog/2019/egress-performance/index.rst:11
msgid ""
"The application used for this investigation was the Java version of "
"Acmeair, which simulates an airline reservation system. This application "
"is used in the Performance Regression Patrol of Istio daily builds, but "
"on that setup the microservices have been accessing the external MongoDB "
"directly via their sidecars, without an egress gateway."
msgstr ""

#: ../../source/blog/2019/egress-performance/index.rst:17
msgid ""
"The diagram below illustrates how regression patrol currently runs with "
"Acmeair and Istio:"
msgstr ""

#: ../../source/blog/2019/egress-performance/index.rst:25
msgid ""
"Another difference is that the application communicates with the external"
" DB with plain MongoDB protocol. The first change made for this study was"
" to establish a TLS communication between the MongoDB and its clients "
"running within the application, as this is a more realistic scenario."
msgstr ""

#: ../../source/blog/2019/egress-performance/index.rst:31
msgid ""
"Several cases for accessing the external database from the mesh were "
"tested and described next."
msgstr ""

#: ../../source/blog/2019/egress-performance/index.rst:35
msgid "Egress traffic cases"
msgstr ""

#: ../../source/blog/2019/egress-performance/index.rst:38
msgid "Case 1: Bypassing the sidecar"
msgstr ""

#: ../../source/blog/2019/egress-performance/index.rst:40
msgid ""
"In this case, the sidecar does not intercept the communication between "
"the application and the external DB. This is accomplished by setting the "
"init container argument -x with the CIDR of the MongoDB, which makes the "
"sidecar ignore messages to/from this IP address. For example:"
msgstr ""

#: ../../source/blog/2019/egress-performance/index.rst:56
msgid "Case 2: Through the sidecar, with service entry"
msgstr ""

#: ../../source/blog/2019/egress-performance/index.rst:58
msgid ""
"This is the default configuration when the sidecar is injected into the "
"application pod. All messages are intercepted by the sidecar and routed "
"to the destination according to the configured rules, including the "
"communication with external services. The MongoDB was defined as a "
"``ServiceEntry``."
msgstr ""

#: ../../source/blog/2019/egress-performance/index.rst:70
msgid "Case 3: Egress gateway"
msgstr ""

#: ../../source/blog/2019/egress-performance/index.rst:72
msgid ""
"The egress gateway and corresponding destination rule and virtual service"
" resources are defined for accessing MongoDB. All traffic to and from the"
" external DB goes through the egress gateway (envoy)."
msgstr ""

#: ../../source/blog/2019/egress-performance/index.rst:82
msgid "Case 4: Mutual TLS between sidecars and the egress gateway"
msgstr ""

#: ../../source/blog/2019/egress-performance/index.rst:84
msgid ""
"In this case, there is an extra layer of security between the sidecars "
"and the gateway, so some impact in performance is expected."
msgstr ""

#: ../../source/blog/2019/egress-performance/index.rst:93
msgid "Case 5: Egress gateway with SNI proxy"
msgstr ""

#: ../../source/blog/2019/egress-performance/index.rst:95
msgid ""
"This scenario is used to evaluate the case where another proxy is "
"required to access wildcarded domains. This may be required due current "
"limitations of envoy. An nginx proxy was created as sidecar in the egress"
" gateway pod."
msgstr ""

#: ../../source/blog/2019/egress-performance/index.rst:106
msgid "Environment"
msgstr ""

#: ../../source/blog/2019/egress-performance/index.rst:108
msgid "Istio version: 1.0.2"
msgstr ""

#: ../../source/blog/2019/egress-performance/index.rst:109
msgid "``K8s`` version: ``1.10.5_1517``"
msgstr ""

#: ../../source/blog/2019/egress-performance/index.rst:110
msgid ""
"Acmeair App: 4 services (1 replica of each), inter-services transactions,"
" external Mongo DB, avg payload: 620 bytes."
msgstr ""

#: ../../source/blog/2019/egress-performance/index.rst:114
msgid "Results"
msgstr ""

#: ../../source/blog/2019/egress-performance/index.rst:116
msgid ""
"``Jmeter`` was used to generate the workload which consisted in a "
"sequence of 5-minute runs, each one using a growing number of clients "
"making http requests. The number of clients used were 1, 5, 10, 20, 30, "
"40, 50 and 60."
msgstr ""

#: ../../source/blog/2019/egress-performance/index.rst:122
msgid "Throughput"
msgstr ""

#: ../../source/blog/2019/egress-performance/index.rst:124
msgid "The chart below shows the throughput obtained for the different cases:"
msgstr ""

#: ../../source/blog/2019/egress-performance/index.rst:131
msgid ""
"As you can see, there is no major impact in having sidecars and the "
"egress gateway between the application and the external MongoDB, but "
"enabling mutual TLS and then adding the SNI proxy caused a degradation in"
" the throughput of about 10% and 24%, respectively."
msgstr ""

#: ../../source/blog/2019/egress-performance/index.rst:137
msgid "Response time"
msgstr ""

#: ../../source/blog/2019/egress-performance/index.rst:139
msgid ""
"The average response times for the different requests were collected when"
" traffic was being driven with 20 clients. The chart below shows the "
"average, median, 90%, 95% and 99% average values for each case:"
msgstr ""

#: ../../source/blog/2019/egress-performance/index.rst:148
msgid ""
"Likewise, not much difference in the response times for the 3 first "
"cases, but mutual TLS and the extra proxy adds noticeable latency."
msgstr ""

#: ../../source/blog/2019/egress-performance/index.rst:152
msgid "CPU utilization"
msgstr ""

#: ../../source/blog/2019/egress-performance/index.rst:154
msgid ""
"The CPU usage was collected for all Istio components as well as for the "
"sidecars during the runs. For a fair comparison, CPU used by Istio was "
"normalized by the throughput obtained for a given run. The results are "
"shown in the following graph:"
msgstr ""

#: ../../source/blog/2019/egress-performance/index.rst:164
msgid ""
"In terms of CPU consumption per transaction, Istio has used significantly"
" more CPU only in the egress gateway + SNI proxy case."
msgstr ""

#: ../../source/blog/2019/egress-performance/index.rst:168
msgid "Conclusion"
msgstr ""

#: ../../source/blog/2019/egress-performance/index.rst:170
msgid ""
"In this investigation, we tried different options to access an external "
"TLS-enabled MongoDB to compare their performance. The introduction of the"
" Egress Gateway did not have a significant impact on the performance nor "
"meaningful additional CPU consumption. Only when enabling mutual TLS "
"between sidecars and egress gateway or using an additional SNI proxy for "
"wildcarded domains we could observe some degradation."
msgstr ""

