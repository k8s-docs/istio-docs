# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, BandCamp
# This file is distributed under the same license as the istio-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: istio-docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-03-22 10:08+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../source/blog/2019/announcing-istio-client-go/index.rst:2
msgid "announcing-istio-client-go"
msgstr ""

#: ../../source/blog/2019/announcing-istio-client-go/index.rst:4
msgid ""
"We are pleased to announce the initial release of the Istio `client go "
"<https://github.com/istio/client-go>`_ repository which enables "
"developers to gain programmatic access to Istio APIs in a Kubernetes "
"environment. The generated Kubernetes informers and client set in this "
"repository makes it easy for developers to create controllers and perform"
" Create, Read, Update and Delete (CRUD) operations for all Istio Custom "
"Resource Definitions (CRDs)."
msgstr ""

#: ../../source/blog/2019/announcing-istio-client-go/index.rst:12
msgid ""
"This was a highly requested functionality by many Istio users, as is "
"evident from the feature requests on the clients generated by `Aspen Mesh"
" <https://github.com/aspenmesh/istio-client-go>`_ and the `Knative "
"project <https://github.com/knative/pkg>`_. If you’re currently using one"
" of the above mentioned clients, you can easily switch to using `Istio "
"client go <https://github.com/istio/client-go>`_ like this:"
msgstr ""

#: ../../source/blog/2019/announcing-istio-client-go/index.rst:19
msgid ""
"{{< text go>}} import ( … - versionedclient “github.com/aspenmesh/istio-"
"client-go/pkg/client/clientset/versioned” + versionedclient “istio.io"
"/client-go/pkg/clientset/versioned” ) {{< /text >}}"
msgstr ""

#: ../../source/blog/2019/announcing-istio-client-go/index.rst:24
msgid ""
"As the generated client sets are functionally equivalent, switching the "
"imported client libraries should be sufficient in order to consume the "
"newly generated library."
msgstr ""

#: ../../source/blog/2019/announcing-istio-client-go/index.rst:29
msgid "How to use client-go"
msgstr ""

#: ../../source/blog/2019/announcing-istio-client-go/index.rst:31
msgid ""
"The Istio `client go <https://github.com/istio/client-go>`_ repository "
"follows the same branching strategy as the `Istio API "
"<https://github.com/istio/api>`_ repository, as the client repository "
"depends on the API definitions. If you want to use a stable client set, "
"you can use the release branches or tagged versions in the `client go "
"<https://github.com/istio/client-go>`_ repository. Using the client set "
"is very similar to using the `Kubernetes client go "
"<https://github.com/kubernetes/client-go>`_, here’s a quick example of "
"using the client to list all `Istio virtual services "
"</docs/reference/config/networking/virtual-service>`_ in the passed "
"namespace:"
msgstr ""

#: ../../source/blog/2019/announcing-istio-client-go/index.rst:43
msgid "{{< text go >}} package main"
msgstr ""

#: ../../source/blog/2019/announcing-istio-client-go/index.rst:45
msgid "import ( “log” “os”"
msgstr ""

#: ../../source/blog/2019/announcing-istio-client-go/index.rst:47
msgid ""
"metav1 “k8s.io/apimachinery/pkg/apis/meta/v1” “k8s.io/client-"
"go/tools/clientcmd”"
msgstr ""

#: ../../source/blog/2019/announcing-istio-client-go/index.rst:50
msgid "versionedclient “istio.io/client-go/pkg/clientset/versioned” )"
msgstr ""

#: ../../source/blog/2019/announcing-istio-client-go/index.rst:52
#, python-format
msgid ""
"func main() { kubeconfig := os.Getenv(“KUBECONFIG”) namespace := "
"os.Getenv(“NAMESPACE”) if len(kubeconfig) == 0 \\|\\| len(namespace) == 0"
" { log.Fatalf(“Environment variables KUBECONFIG and NAMESPACE need to be "
"set”) } restConfig, err := clientcmd.BuildConfigFromFlags(\"“, "
"kubeconfig) if err != nil { log.Fatalf(”Failed to create k8s rest client:"
" %s\", err) }"
msgstr ""

#: ../../source/blog/2019/announcing-istio-client-go/index.rst:59
#, python-format
msgid ""
"ic, err := versionedclient.NewForConfig(restConfig) if err != nil { "
"log.Fatalf(“Failed to create istio client: %s”, err) } // Print all "
"VirtualServices vsList, err := "
"ic.NetworkingV1alpha3().VirtualServices(namespace).List(metav1.ListOptions{})"
" if err != nil { log.Fatalf(“Failed to get VirtualService in %s "
"namespace: %s”, namespace, err) } for i := range vsList.Items { vs := "
"vsList.Items[i] log.Printf(“Index: %d VirtualService Hosts: %+v:raw-"
"latex:`\\n`”, i, vs.Spec.GetHosts()) } }"
msgstr ""

#: ../../source/blog/2019/announcing-istio-client-go/index.rst:68
#, python-format
msgid ""
"You can find a more in-depth example `here <https://github.com/istio"
"/client-"
"go/blob/%7B%7B%3C%20source_branch_name%20%3E%7D%7D/cmd/example/client.go>`_."
msgstr ""

#: ../../source/blog/2019/announcing-istio-client-go/index.rst:72
msgid "Useful tools created for generating Istio client-go"
msgstr ""

#: ../../source/blog/2019/announcing-istio-client-go/index.rst:74
msgid ""
"If you’re wondering why it took so long or why was it difficult to "
"generate this client set, this section is for you. In Istio, we use "
"`protobuf <https://developers.google.com/protocol-buffers>`_ "
"specifications to write APIs which are then converted to Go definitions "
"using the protobuf tool chain. There are three major challenges which you"
" might face if you’re trying to generate Kubernetes client set from a "
"protobuf-generated API:"
msgstr ""

#: ../../source/blog/2019/announcing-istio-client-go/index.rst:82
#, python-format
msgid ""
"**Creating Kubernetes Wrapper Types** - Kubernetes `client generation "
"<https://github.com/kubernetes/code-generator/tree/master/cmd/client-"
"gen>`_ library only works for Go objects which follow the Kubernetes "
"object specification for e.g. \\ `Authentication Policy Kubernetes "
"Wrappers <https://github.com/istio/client-"
"go/blob/%7B%7B%3C%20source_branch_name%20%3E%7D%7D/pkg/apis/authentication/v1alpha1/types.gen.go>`_."
" This means for every API which needs programmatic access, you need to "
"create these wrappers. Additionally, there is a fair amount of "
"boilerplate needed for every ``CRD`` group, version and kind that needs "
"client code generation. To automate this process, we created a "
"`Kubernetes type generator "
"<https://github.com/istio/tools/tree/master/cmd/kubetype-gen>`_ tool "
"which can automatically create the Kubernetes types based on annotations."
" The annotations parsed by this tool and the various available options "
"are explained in the `README "
"<https://github.com/istio/tools/blob/master/cmd/kubetype-"
"gen/README.md>`_. Note that if you’re using protobuf tools to generate Go"
" types, you would need to add these annotations as comments in the proto "
"files, so that the comments are present in the generated Go files which "
"are then used by this tool."
msgstr ""

#: ../../source/blog/2019/announcing-istio-client-go/index.rst:102
#, python-format
msgid ""
"**Generating deep copy methods** - In Kubernetes client machinery, if you"
" want to mutate any object returned from the client set, you are required"
" to make a copy of the object to prevent modifying the object in-place in"
" the cache store. The canonical way to do this is to create a "
"``deepcopy`` method on all nested types. We created a tool `protoc deep "
"copy generator <https://github.com/istio/tools/tree/master/cmd/protoc-"
"gen-deepcopy>`_ which is a ``protoc`` plugin and can automatically create"
" ``deepcopy`` method based on annotations using the Proto library utility"
" `Proto Clone "
"<https://godoc.org/github.com/golang/protobuf/proto#Clone>`_. Here’s an "
"`example "
"<https://github.com/istio/api/blob/%7B%7B%3C%20source_branch_name%20%3E%7D%7D/authentication/v1alpha1/policy_deepcopy.gen.go>`_"
" of the generated ``deepcopy`` method."
msgstr ""

#: ../../source/blog/2019/announcing-istio-client-go/index.rst:117
#, python-format
msgid ""
"**Marshaling and Unmarshaling types to/from JSON** - For the types "
"generated from proto definitions, it is often problematic to use the "
"default Go JSON encoder/decoder as there are various fields like "
"protobuf’s ``oneof`` which requires special handling. Additionally, any "
"Proto fields with underscores in their name might serialize/deserialize "
"to different field names depending on the encoder/decoder as the Go "
"struct tag are `generated differently "
"<https://github.com/istio/istio/issues/17600>`_. It is always recommended"
" to use protobuf primitives for serializing/deserializing to JSON instead"
" of relying on default Go library. We created a tool `protoc JSON shim "
"<https://github.com/istio/tools/tree/master/cmd/protoc-gen-jsonshim>`_ "
"which is a ``protoc`` plugin and can automatically create "
"Marshalers/Unmarshalers for all Go type generated from Proto definitions."
" Here’s an `example "
"<https://github.com/istio/api/blob/%7B%7B%3C%20source_branch_name%20%3E%7D%7D/authentication/v1alpha1/policy_json.gen.go>`_"
" of the code generated by this tool."
msgstr ""

#: ../../source/blog/2019/announcing-istio-client-go/index.rst:135
msgid ""
"I’m hoping that the newly released client library enables users to create"
" more integrations and controllers for the Istio APIs, and the tools "
"mentioned above can be used by developers to generate Kubernetes client "
"set from Proto APIs."
msgstr ""

