# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, BandCamp
# This file is distributed under the same license as the istio-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: istio-docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-03-22 10:08+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../source/blog/2019/app-identity-and-access-adapter/index.rst:2
msgid "app-identity-and-access-adapter"
msgstr ""

#: ../../source/blog/2019/app-identity-and-access-adapter/index.rst:4
msgid ""
"If you are running your containerized applications on Kubernetes, you can"
" benefit from using the App Identity and Access Adapter for an abstracted"
" level of security with zero code changes or redeploys."
msgstr ""

#: ../../source/blog/2019/app-identity-and-access-adapter/index.rst:8
msgid ""
"Whether your computing environment is based on a single cloud provider, a"
" combination of multiple cloud providers, or following a hybrid cloud "
"approach, having a centralized identity management can help you to "
"preserve existing infrastructure and avoid vendor lock-in."
msgstr ""

#: ../../source/blog/2019/app-identity-and-access-adapter/index.rst:13
msgid ""
"With the `App Identity and Access Adapter <https://github.com/ibm-cloud-"
"security/app-identity-and-access-adapter>`_, you can use any OAuth2/OIDC "
"provider: IBM Cloud App ID, Auth0, Okta, Ping Identity, AWS Cognito, "
"Azure AD B2C and more. Authentication and authorization policies can be "
"applied in a streamlined way in all environments — including frontend and"
" backend applications — all without code changes or redeploys."
msgstr ""

#: ../../source/blog/2019/app-identity-and-access-adapter/index.rst:22
msgid "Understanding Istio and the adapter"
msgstr ""

#: ../../source/blog/2019/app-identity-and-access-adapter/index.rst:24
msgid ""
"`Istio </docs/concepts/what-is-istio/>`_ is an open source service mesh "
"that transparently layers onto distributed applications and seamlessly "
"integrates with Kubernetes. To reduce the complexity of deployments Istio"
" provides behavioral insights and operational control over the service "
"mesh as a whole. See the `Istio Architecture "
"</docs/ops/deployment/architecture/>`_ for more details."
msgstr ""

#: ../../source/blog/2019/app-identity-and-access-adapter/index.rst:31
msgid ""
"Istio uses `Envoy proxy sidecars </blog/2019/data-plane-setup/>`_ to "
"mediate inbound and outbound traffic for all pods in the service mesh. "
"Istio extracts telemetry from the Envoy sidecars and sends it to Mixer, "
"the Istio component responsible for collecting telemetry and enforcing "
"policy."
msgstr ""

#: ../../source/blog/2019/app-identity-and-access-adapter/index.rst:37
msgid ""
"The App Identity and Access adapter extends the Mixer functionality by "
"analyzing the telemetry (attributes) against various access control "
"policies across the service mesh. The access control policies can be "
"linked to a particular Kubernetes services and can be finely tuned to "
"specific service endpoints. For more information about policies and "
"telemetry, see the Istio documentation."
msgstr ""

#: ../../source/blog/2019/app-identity-and-access-adapter/index.rst:44
msgid ""
"When `App Identity and Access Adapter <https://github.com/ibm-cloud-"
"security/app-identity-and-access-adapter>`_ is combined with Istio, it "
"provides a scalable, integrated identity and access solution for "
"multicloud architectures that does not require any custom application "
"code changes."
msgstr ""

#: ../../source/blog/2019/app-identity-and-access-adapter/index.rst:51
msgid "Installation"
msgstr ""

#: ../../source/blog/2019/app-identity-and-access-adapter/index.rst:53
msgid ""
"App Identity and Access adapter can be installed using Helm directly from"
" the ``github.com`` repository"
msgstr ""

#: ../../source/blog/2019/app-identity-and-access-adapter/index.rst:59
msgid ""
"https://raw.githubusercontent.com/ibm-cloud-security/app-identity-and-"
"access-adapter/master/helm/appidentityandaccessadapter $ helm install "
"–name appidentityandaccessadapter "
"appidentityandaccessadapter/appidentityandaccessadapter"
msgstr ""

#: ../../source/blog/2019/app-identity-and-access-adapter/index.rst:63
msgid ""
"Alternatively, you can clone the repository and install the Helm chart "
"locally"
msgstr ""

#: ../../source/blog/2019/app-identity-and-access-adapter/index.rst:69
msgid ""
"git@github.com:ibm-cloud-security/app-identity-and-access-adapter.git $ "
"helm install ./helm/appidentityandaccessadapter –name "
"appidentityandaccessadapter."
msgstr ""

#: ../../source/blog/2019/app-identity-and-access-adapter/index.rst:74
msgid "Protecting web applications"
msgstr ""

#: ../../source/blog/2019/app-identity-and-access-adapter/index.rst:76
msgid ""
"Web applications are most commonly protected by the OpenID Connect (OIDC)"
" workflow called ``authorization_code``. When an "
"unauthenticated/unauthorized user is detected, they are automatically "
"redirected to the identity service of your choice and presented with the "
"authentication page. When authentication completes, the browser is "
"redirected back to an implicit ``/oidc/callback`` endpoint intercepted by"
" the adapter. At this point, the adapter obtains access and identity "
"tokens from the identity service and then redirects users back to their "
"originally requested URL in the web app."
msgstr ""

#: ../../source/blog/2019/app-identity-and-access-adapter/index.rst:86
msgid ""
"Authentication state and tokens are maintained by the adapter. Each "
"request processed by the adapter will include the Authorization header "
"bearing both access and identity tokens in the following format "
"``Authorization: Bearer <access_token> <id_token>``"
msgstr ""

#: ../../source/blog/2019/app-identity-and-access-adapter/index.rst:91
msgid ""
"Developers can read leverage the tokens for application experience "
"adjustments, e.g. displaying user name, adjusting UI based on user role "
"etc."
msgstr ""

#: ../../source/blog/2019/app-identity-and-access-adapter/index.rst:95
msgid ""
"In order to terminate the authenticated session and wipe tokens, aka user"
" logout, simply redirect browser to the ``/oidc/logout`` endpoint under "
"the protected service, e.g. if you’re serving your app from "
"``https://example.com/myapp``, redirect users to "
"``https://example.com/myapp/oidc/logout``"
msgstr ""

#: ../../source/blog/2019/app-identity-and-access-adapter/index.rst:101
msgid ""
"Whenever access token expires, a refresh token is used to automatically "
"acquire new access and identity tokens without your user’s needing to re-"
"authenticate. If the configured identity provider returns a refresh "
"token, it is persisted by the adapter and used to retrieve new access and"
" identity tokens when the old ones expire."
msgstr ""

#: ../../source/blog/2019/app-identity-and-access-adapter/index.rst:108
msgid "Applying web application protection"
msgstr ""

#: ../../source/blog/2019/app-identity-and-access-adapter/index.rst:110
msgid ""
"Protecting web applications requires creating two types of resources - "
"use ``OidcConfig`` resources to define various OIDC providers, and "
"``Policy`` resources to define the web app protection policies."
msgstr ""

#: ../../source/blog/2019/app-identity-and-access-adapter/index.rst:117
msgid ""
"OidcConfig metadata: name: my-oidc-provider-config namespace: sample-"
"namespace spec: discoveryUrl: clientId: clientSecretRef: name: key:"
msgstr ""

#: ../../source/blog/2019/app-identity-and-access-adapter/index.rst:124
msgid ""
"metadata: name: my-sample-web-policy namespace: sample-namespace spec: "
"targets: - serviceName: paths: - prefix: /webapp method: ALL policies: - "
"policyType: oidc config: my-oidc-provider-config rules: // optional - "
"claim: iss match: ALL source: access_token values: - - claim: scope "
"match: ALL source: access_token values: - openid"
msgstr ""

#: ../../source/blog/2019/app-identity-and-access-adapter/index.rst:130
msgid ""
"`Read more about protecting web applications <https://github.com/ibm-"
"cloud-security/app-identity-and-access-adapter>`_"
msgstr ""

#: ../../source/blog/2019/app-identity-and-access-adapter/index.rst:134
msgid "Protecting backend application and APIs"
msgstr ""

#: ../../source/blog/2019/app-identity-and-access-adapter/index.rst:136
msgid ""
"Backend applications and APIs are protected using the Bearer Token flow, "
"where an incoming token is validated against a particular policy. The "
"Bearer Token authorization flow expects a request to contain the "
"``Authorization`` header with a valid access token in JWT format. The "
"expected header structure is ``Authorization: Bearer {access_token}``. In"
" case token is successfully validated request will be forwarded to the "
"requested service. In case token validation fails the HTTP 401 will be "
"returned back to the client with a list of scopes that are required to "
"access the API."
msgstr ""

#: ../../source/blog/2019/app-identity-and-access-adapter/index.rst:147
msgid "Applying backend application and APIs protection"
msgstr ""

#: ../../source/blog/2019/app-identity-and-access-adapter/index.rst:149
msgid ""
"Protecting backend applications and APIs requires creating two types of "
"resources - use ``JwtConfig`` resources to define various JWT providers, "
"and ``Policy`` resources to define the backend app protection policies."
msgstr ""

#: ../../source/blog/2019/app-identity-and-access-adapter/index.rst:156
msgid ""
"JwtConfig metadata: name: my-jwt-config namespace: sample-namespace spec:"
" jwksUrl:"
msgstr ""

#: ../../source/blog/2019/app-identity-and-access-adapter/index.rst:162
msgid ""
"metadata: name: my-sample-backend-policy namespace: sample-namespace "
"spec: targets: - serviceName: paths: - prefix: /api/files method: ALL "
"policies: - policyType: jwt config: my-oidc-provider-config rules: // "
"optional - claim: iss match: ALL source: access_token values: - - claim: "
"scope match: ALL source: access_token values: - files.read - files.write"
msgstr ""

#: ../../source/blog/2019/app-identity-and-access-adapter/index.rst:169
msgid ""
"`Read more about protecting backend applications <https://github.com/ibm-"
"cloud-security/app-identity-and-access-adapter>`_"
msgstr ""

#: ../../source/blog/2019/app-identity-and-access-adapter/index.rst:173
msgid "Known limitations"
msgstr ""

#: ../../source/blog/2019/app-identity-and-access-adapter/index.rst:175
msgid ""
"At the time of writing this blog there are two known limitations of the "
"App Identity and Access adapter:"
msgstr ""

#: ../../source/blog/2019/app-identity-and-access-adapter/index.rst:178
msgid ""
"If you use the App Identity and Access adapter for Web Applications you "
"should not create more than a single replica of the adapter. Due to the "
"way Envoy Proxy was handling HTTP headers it was impossible to return "
"multiple ``Set-Cookie`` headers from Mixer back to Envoy. Therefore we "
"couldn’t set all the cookies required for handling Web Application "
"scenarios. The issue was recently addressed in Envoy and Mixer and we’re "
"planning to address this in future versions of our adapter. **Note that "
"this only affects Web Applications, and doesn’t affect Backend Apps and "
"APIs in any way**."
msgstr ""

#: ../../source/blog/2019/app-identity-and-access-adapter/index.rst:188
msgid ""
"As a general best practice you should always consider using mutual-tls "
"for any in-cluster communications. At the moment the communications "
"channel between Mixer and App Identity and Access adapter currently does "
"not use mutual-tls. In future we plan to address this by implementing an "
"approach described in the `Mixer Adapter developer guide "
"<https://github.com/istio/istio/wiki/Mixer-Out-of-Process-Adapter-"
"Walkthrough#step-7-encrypt-connection-between-mixer-and-grpc-adapter>`_."
msgstr ""

#: ../../source/blog/2019/app-identity-and-access-adapter/index.rst:197
msgid "Summary"
msgstr ""

#: ../../source/blog/2019/app-identity-and-access-adapter/index.rst:199
msgid ""
"When a multicloud strategy is in place, security can become complicated "
"as the environment grows and diversifies. While cloud providers supply "
"protocols and tools to ensure their offerings are safe, the development "
"teams are still responsible for the application-level security, such as "
"API access control with OAuth2, defending against man-in-the-middle "
"attacks with traffic encryption, and providing mutual TLS for service "
"access control. However, this becomes complex in a multicloud environment"
" since you might need to define those security details for each service "
"separately. With proper security protocols in place, those external and "
"internal threats can be mitigated."
msgstr ""

#: ../../source/blog/2019/app-identity-and-access-adapter/index.rst:210
msgid ""
"Development teams have spent time making their services portable to "
"different cloud providers, and in the same regard, the security in place "
"should be flexible and not infrastructure-dependent."
msgstr ""

#: ../../source/blog/2019/app-identity-and-access-adapter/index.rst:214
msgid ""
"Istio and App Identity and Access Adapter allow you to secure your "
"Kubernetes apps with absolutely zero code changes or redeployments "
"regardless of which programming language and which frameworks you use. "
"Following this approach ensures maximum portability of your apps, and "
"ability to easily enforce same security policies across multiple "
"environments."
msgstr ""

#: ../../source/blog/2019/app-identity-and-access-adapter/index.rst:221
msgid ""
"You can read more about the App Identity and Access Adapter in the "
"`release blog <https://www.ibm.com/cloud/blog/using-istio-to-secure-your-"
"multicloud-kubernetes-applications-with-zero-code-change>`_."
msgstr ""

